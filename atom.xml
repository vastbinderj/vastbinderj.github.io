<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ascent.io]]></title>
  <link href="http://www.ascent.io/atom.xml" rel="self"/>
  <link href="http://www.ascent.io/"/>
  <updated>2014-03-26T09:47:58-07:00</updated>
  <id>http://www.ascent.io/</id>
  <author>
    <name><![CDATA[James Vastbinder]]></name>
    <email><![CDATA[james@ascent.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run Fmt Upon Save in Vim]]></title>
    <link href="http://www.ascent.io/blog/2014/03/26/go-fmt-vim/"/>
    <updated>2014-03-26T07:18:32-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/26/go-fmt-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with Go for a few weeks now and thought I had vim set up to
format my code using Fmt every time I saved.  I did and I didn&rsquo;t.</p>

<p>You see, we are working on the authorization piece of Ottemo and since many
projects can benefit from the work we are doing, we wanted to submit our
OAUTH2 work to the <a href="http://martini.codegangsta.io/">Martini project</a>.</p>

<p>The one liner, which will format your code is below:</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; format golang upon save</span>
</span><span class='line'>autocmd <span class="nb">FileType</span> <span class="k">go</span> autocmd <span class="nb">BufWritePre</span> <span class="p">&lt;</span>buffer<span class="p">&gt;</span> Fmt
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>However, there is a little more to the puzzle. In most cases I prefer spaces
to tabs, but this is not a discussion on tabs vs. spaces.  Somehow this formatting was
not being set upon save.  No matter what I did, it still saved the file replacing
tabs with spaces and an indention of 2 spaces.</p>

<p>I quickly found the culprit.  In my .vimrc I have my default settings for
managing tabs and spaces to default to 2 spaces and to convert tabs to
spaces when I save a file.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">set</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">2</span>             <span class="c">&quot; number of spaces that a &lt;tab&gt; represents in a file</span>
</span><span class='line'><span class="k">set</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">2</span>          <span class="c">&quot; number of spaces to use for (auto)indent</span>
</span><span class='line'><span class="k">set</span> <span class="nb">expandtab</span>             <span class="c">&quot; expand tabs to spaces</span>
</span><span class='line'><span class="k">set</span> <span class="nb">softtabstop</span><span class="p">=</span><span class="m">2</span>         <span class="c">&quot; number of spaces that a &lt;tab&gt; represents</span>
</span><span class='line'><span class="k">set</span> <span class="nb">smarttab</span>              <span class="c">&quot; smart handling of tabs when inserting or deleting</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>This meant that when I opened a Golang formatted file, as soon as I saved it,
gone were the tabs in my Golang files.  I wanted to adhere to the standard, so I
needed to find a way to make an exception for Go source files.  According to
<a href="http://golang.org/doc/effective_go.html#formatting">the Go standards</a> they use tabs
with a tabstop of 8.</p>

<p>To make an exception for Go source code, I am using the <code>setlocal</code> identifier
to apply the exception to my global settings. Here is the result:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>autocmd <span class="nb">FileType</span> <span class="k">go</span> <span class="k">setlocal</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">8</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">8</span> <span class="nb">softtabstop</span><span class="p">=</span><span class="m">8</span>     <span class="c">&quot; set tab stops to 8 for Go files</span>
</span><span class='line'>autocmd <span class="nb">FileType</span> <span class="k">go</span> <span class="k">setlocal</span> <span class="nb">noexpandtab</span>                              <span class="c">&quot; don&#39;t expand tabs to spaces for Go files</span>
</span></code></pre></td></tr></table></div></figure>


<p>This fixed my problems when saving Go formatted files and saves me from running
<code>go Fmt</code> on my files outside of vim.  Here is my final set of vim customizations:</p>

<figure class='code'><figcaption><span>.vimrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="c">&quot; Go tagbar config</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:tagbar_type_go <span class="p">=</span> {
</span><span class='line'>    \ <span class="s1">&#39;ctagstype&#39;</span> : <span class="s1">&#39;go&#39;</span><span class="p">,</span>
</span><span class='line'>    \ <span class="s1">&#39;kinds&#39;</span>     : [
</span><span class='line'>        \ <span class="s1">&#39;p:package&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;i:imports:1&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;c:constants&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;v:variables&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;t:types&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;n:interfaces&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;w:fields&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;e:embedded&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;m:methods&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;r:constructor&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;f:functions&#39;</span>
</span><span class='line'>    \ ]<span class="p">,</span>
</span><span class='line'>    \ <span class="s1">&#39;sro&#39;</span> : <span class="s1">&#39;.&#39;</span><span class="p">,</span>
</span><span class='line'>    \ <span class="s1">&#39;kind2scope&#39;</span> : {
</span><span class='line'>        \ <span class="s1">&#39;t&#39;</span> : <span class="s1">&#39;ctype&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;n&#39;</span> : <span class="s1">&#39;ntype&#39;</span>
</span><span class='line'>    \ }<span class="p">,</span>
</span><span class='line'>    \ <span class="s1">&#39;scope2kind&#39;</span> : {
</span><span class='line'>        \ <span class="s1">&#39;ctype&#39;</span> : <span class="s1">&#39;t&#39;</span><span class="p">,</span>
</span><span class='line'>        \ <span class="s1">&#39;ntype&#39;</span> : <span class="s1">&#39;n&#39;</span>
</span><span class='line'>    \ }<span class="p">,</span>
</span><span class='line'>    \ <span class="s1">&#39;ctagsbin&#39;</span>  : <span class="s1">&#39;gotags&#39;</span><span class="p">,</span>
</span><span class='line'>    \ <span class="s1">&#39;ctagsargs&#39;</span> : <span class="s1">&#39;-sort -silent&#39;</span>
</span><span class='line'>\ }
</span><span class='line'>
</span><span class='line'><span class="c">&quot; Golang customizations</span>
</span><span class='line'><span class="k">au</span> <span class="nb">BufWritePost</span> *.<span class="k">go</span> <span class="k">silent</span><span class="p">!</span> <span class="p">!</span>ctags <span class="p">-</span>R <span class="p">--</span>exclude<span class="p">=</span>*.<span class="nb">js</span><span class="p">,</span>*.html &amp;        <span class="c">&quot; generate go ctags upon save</span>
</span><span class='line'>autocmd <span class="nb">FileType</span> <span class="k">go</span> autocmd <span class="nb">BufWritePre</span> <span class="p">&lt;</span>buffer<span class="p">&gt;</span> Fmt                  <span class="c">&quot; format files upon save in GO</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:syntastic_go_checkers <span class="p">=</span> [<span class="s1">&#39;go&#39;</span><span class="p">,</span><span class="s1">&#39;golint&#39;</span>]                         <span class="c">&quot; use golint for syntax checking in Go</span>
</span><span class='line'><span class="k">let</span> <span class="k">g</span>:godef_same_file_in_same_window<span class="p">=</span><span class="m">1</span>                                <span class="c">&quot; when in go, move the cursor if in same file </span>
</span><span class='line'>autocmd <span class="nb">FileType</span> <span class="k">go</span> <span class="k">setlocal</span> <span class="nb">shiftwidth</span><span class="p">=</span><span class="m">8</span> <span class="nb">tabstop</span><span class="p">=</span><span class="m">8</span> <span class="nb">softtabstop</span><span class="p">=</span><span class="m">8</span>     <span class="c">&quot; set tab stops to 8 for Go files</span>
</span><span class='line'>autocmd <span class="nb">FileType</span> <span class="k">go</span> <span class="k">setlocal</span> <span class="nb">noexpandtab</span>                              <span class="c">&quot; don&#39;t expand tabs to spaces for Go files</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you see any issues with my customizations or think I should do something
differently, let me know.</p>

<p>Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Personal Bash Prompt]]></title>
    <link href="http://www.ascent.io/blog/2014/03/17/bash-prompt/"/>
    <updated>2014-03-17T12:10:00-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/17/bash-prompt</id>
    <content type="html"><![CDATA[<p>I like to have my prompt tell me several things: current directory, who I am
logged in as, current git branch and language specific context.  Recently, I&rsquo;ve been
jumping between ruby, python, node and golang as we decide upon the primary engine
for Ottemo.  It has been an interesting process as we want <a href="http://www.ottemo.io">Ottemo</a>
 to be rock-solid and secure as well as super easy to setup and of course, blindingly fast.</p>

<!-- more -->


<p>This vetting process is better served in a future post as I just want to provide
a sample light-weight prompt for others to follow, today.</p>

<p>I enjoy a color prompt, so the first thing I do is enable 256 colors in my terminal
emulator:</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># uncomment for a colored prompt</span>
</span><span class='line'><span class="nv">force_color_prompt</span><span class="o">=</span>yes
</span><span class='line'><span class="nb">export </span><span class="nv">GREP_OPTIONS</span><span class="o">=</span><span class="s1">&#39;--color=auto&#39;</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CLICOLOR</span><span class="o">=</span>1
</span><span class='line'>
</span><span class='line'><span class="c"># set a fancy prompt (non-color, unless we know we &quot;want&quot; color)</span>
</span><span class='line'><span class="k">case</span> <span class="s2">&quot;$TERM&quot;</span> in
</span><span class='line'>    xterm-color<span class="o">)</span> <span class="nv">color_prompt</span><span class="o">=</span>yes;;
</span><span class='line'><span class="k">esac</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$force_color_prompt&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    if</span> <span class="o">[</span> -x /usr/bin/tput <span class="o">]</span> <span class="o">&amp;&amp;</span> tput setaf 1 &gt;&amp;/dev/null; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">color_prompt</span><span class="o">=</span>yes
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nv">color_prompt</span><span class="o">=</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Next, I want to distinguish between when I&rsquo;m logged in as root on computers
I control, so I change the colors in my prompt for my account and root&rsquo;s account.  You
can find a great list of colors <a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html">available here</a>.</p>

<figure class='code'><figcaption><span>showme_colors.bash</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'><span class="c">#   This file echoes a bunch of color codes to the </span>
</span><span class='line'><span class="c">#   terminal to demonstrate what&#39;s available.  Each </span>
</span><span class='line'><span class="c">#   line is the color code of one foreground color,</span>
</span><span class='line'><span class="c">#   out of 17 (default + 16 escapes), followed by a </span>
</span><span class='line'><span class="c">#   test use of that color on all nine background </span>
</span><span class='line'><span class="c">#   colors (default + 8 escapes).</span>
</span><span class='line'><span class="c">#</span>
</span><span class='line'>
</span><span class='line'><span class="nv">T</span><span class="o">=</span><span class="s1">&#39;gYw&#39;</span>   <span class="c"># The test text</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\n                 40m     41m     42m     43m\</span>
</span><span class='line'><span class="s2">     44m     45m     46m     47m&quot;</span>;
</span><span class='line'>
</span><span class='line'><span class="k">for </span>FGs in <span class="s1">&#39;    m&#39;</span> <span class="s1">&#39;   1m&#39;</span> <span class="s1">&#39;  30m&#39;</span> <span class="s1">&#39;1;30m&#39;</span> <span class="s1">&#39;  31m&#39;</span> <span class="s1">&#39;1;31m&#39;</span> <span class="s1">&#39;  32m&#39;</span> <span class="se">\</span>
</span><span class='line'>           <span class="s1">&#39;1;32m&#39;</span> <span class="s1">&#39;  33m&#39;</span> <span class="s1">&#39;1;33m&#39;</span> <span class="s1">&#39;  34m&#39;</span> <span class="s1">&#39;1;34m&#39;</span> <span class="s1">&#39;  35m&#39;</span> <span class="s1">&#39;1;35m&#39;</span> <span class="se">\</span>
</span><span class='line'>           <span class="s1">&#39;  36m&#39;</span> <span class="s1">&#39;1;36m&#39;</span> <span class="s1">&#39;  37m&#39;</span> <span class="s1">&#39;1;37m&#39;</span>;
</span><span class='line'>  <span class="k">do </span><span class="nv">FG</span><span class="o">=</span><span class="k">${</span><span class="nv">FGs</span><span class="p">// /</span><span class="k">}</span>
</span><span class='line'>  <span class="nb">echo</span> -en <span class="s2">&quot; $FGs \033[$FG  $T  &quot;</span>
</span><span class='line'>  <span class="k">for </span>BG in 40m 41m 42m 43m 44m 45m 46m 47m;
</span><span class='line'>    <span class="k">do </span><span class="nb">echo</span> -en <span class="s2">&quot;$EINS \033[$FG\033[$BG  $T  \033[0m&quot;</span>;
</span><span class='line'>  <span class="k">done</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span>;
</span><span class='line'><span class="k">done</span>
</span><span class='line'><span class="nb">echo</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is the excerpt from my dotfiles where I set my prompt.  Its not pretty but
it is functional.</p>

<figure class='code'><figcaption><span>.bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># give root a different colored prompt so I have a visual cue</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$(whoami)&quot;</span> <span class="o">=</span> <span class="s1">&#39;root&#39;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span><span class="s1">&#39;\e[0;31m&#39;</span>
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span><span class="s1">&#39;\e[0;32m&#39;</span>
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span><span class="s1">&#39;\e[0m&#39;</span>
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span><span class="s1">&#39;$(__git_ps1 &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span><span class="s1">&#39;$(gvm-prompt &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;[${RED}\u@\h:\W \t.\d${GREEN}${GIT_BRANCH}${NC} ${GVM}] \n &gt; &quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span><span class="s1">&#39;\e[0;31m&#39;</span>
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span><span class="s1">&#39;\e[0;32m&#39;</span>
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span><span class="s1">&#39;\e[0m&#39;</span>
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span><span class="s1">&#39;$(__git_ps1 &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span><span class="s1">&#39;$(gvm-prompt &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;[${GREEN}\u@\h:\W ${RED}${GIT_BRANCH}${NC} ${GVM}] \n &gt; &quot;</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="nb">unset </span>color_prompt force_color_prompt
</span></code></pre></td></tr></table></div></figure>


<p>And finally an example of my current bash prompt:</p>

<p><img src="http://www.ascent.io/images/bash-prompt/shell_prompt.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging a Homebrew Failed Install]]></title>
    <link href="http://www.ascent.io/blog/2014/03/14/debugging-a-homebrew-failed-install/"/>
    <updated>2014-03-14T13:10:30-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/14/debugging-a-homebrew-failed-install</id>
    <content type="html"><![CDATA[<p>This morning I wanted to install a Go environment on my Mac Air, only to be
greeted with this ominous error from homebrew:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install <span class="nv">bzr</span>
</span><span class='line'><span class="o">==</span>&gt; Downloading https://launchpad.net/bzr/2.6/2.6.0/+download/bzr-2.6.0.tar.gz
</span><span class='line'>Already downloaded: /Library/Caches/Homebrew/bazaar-2.6.0.tar.gz
</span><span class='line'><span class="o">==</span>&gt; make man1/bzr.1
</span><span class='line'><span class="o">==</span>&gt; make
</span><span class='line'>Cannot build extension <span class="s2">&quot;bzrlib._annotator_pyx&quot;</span>.
</span><span class='line'>Use <span class="s2">&quot;build_ext --allow-python-fallback&quot;</span> to use slower python implementations instead.
</span><span class='line'>
</span><span class='line'>error: <span class="nb">command</span> <span class="s1">&#39;clang&#39;</span> failed with <span class="nb">exit </span>status 1
</span><span class='line'>make: *** <span class="o">[</span>extensions<span class="o">]</span> Error 1
</span><span class='line'>
</span><span class='line'>READ THIS: https://github.com/Homebrew/homebrew/wiki/troubleshooting
</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<p>Now I had just built out several different Golang development environments earlier
in the week.  Several searches on Google weren&rsquo;t providing any relief or
guidance.</p>

<p>My first step was to update homebrew.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update  <span class="o">&amp;&amp;</span> brew upgrade
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>No relief there either&hellip;.  At least not yet.  I then turned up the logging and
sent it to a gist.</p>

<h3>Send debugging data to a gist</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew gist-logs --config --doctor bzr
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Here is the output I found:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>building extension modules.
</span><span class='line'>python setup.py build_ext -i
</span><span class='line'>No Cython, trying Pyrex...
</span><span class='line'>
</span><span class='line'>The python package <span class="s1">&#39;Pyrex&#39;</span> is not available. If the .c files are available,
</span><span class='line'>they will be built, but modifying the .pyx files will not rebuild them.
</span><span class='line'>
</span><span class='line'>running build_ext
</span><span class='line'>building <span class="s1">&#39;bzrlib._annotator_pyx&#39;</span> extension
</span><span class='line'>creating build
</span><span class='line'>creating build/temp.macosx-10.9-intel-2.7
</span><span class='line'>creating build/temp.macosx-10.9-intel-2.7/bzrlib
</span><span class='line'>clang -fno-strict-aliasing -fno-common -dynamic -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -pipe -arch x86_64 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c bzrlib/_annotator_pyx.c -o build/temp.macosx-10.9-intel-2.7/bzrlib/_annotator_pyx.o
</span><span class='line'>clang: error: unknown argument: <span class="s1">&#39;-mno-fused-madd&#39;</span> <span class="o">[</span>-Wunused-command-line-argument-hard-error-in-future<span class="o">]</span>
</span><span class='line'>clang: note: this will be a hard error <span class="o">(</span>cannot be downgraded to a warning<span class="o">)</span> in the future
</span><span class='line'>
</span><span class='line'>  Cannot build extension <span class="s2">&quot;bzrlib._annotator_pyx&quot;</span>.
</span><span class='line'>  Use <span class="s2">&quot;build_ext --allow-python-fallback&quot;</span> to use slower python implementations instead.
</span><span class='line'>
</span><span class='line'>error: <span class="nb">command</span> <span class="s1">&#39;clang&#39;</span> failed with <span class="nb">exit </span>status 1
</span><span class='line'>make: *** <span class="o">[</span>extensions<span class="o">]</span> Error 1
</span><span class='line'>
</span><span class='line'>HOMEBREW_VERSION: 0.9.5
</span><span class='line'>HEAD: f1a2a667ebc1c630f03298ac8be5882426e7d454
</span><span class='line'>CPU: quad-core 64-bit sandybridge
</span><span class='line'>OS X: 10.9.2-x86_64
</span><span class='line'>Xcode: 5.1
</span><span class='line'>CLT: 5.1.0.0.1.1393561416
</span><span class='line'>X11: 2.7.5 <span class="o">=</span>&gt; /opt/X11
</span></code></pre></td></tr></table></div></figure>


<p>
This led me to belive I needed to install either Cython or Pyrex.  I decided
upon attempting to install Pyrex first.  I quickly learned at the Bazaar
website they force Mac users to use Python 2.6 with their install scripts.</p>

<p>This meant I had to use sudo to get Pyrex to install&hellip; I prefer to localize
my development environments to a user to reduce any possible future dependency issues.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo /usr/bin/easy_install-2.6 pyrex
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>One more attempt at installing Bazaar with Homebrew left me with this error
during make:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew gist-logs --config --doctor bzr
</span><span class='line'>
</span><span class='line'>building extension modules.
</span><span class='line'>python setup.py build_ext -i
</span><span class='line'>running build_ext
</span><span class='line'>skipping <span class="s1">&#39;bzrlib/_annotator_pyx.c&#39;</span> Cython extension <span class="o">(</span>up-to-date<span class="o">)</span>
</span><span class='line'>building <span class="s1">&#39;bzrlib._annotator_pyx&#39;</span> extension
</span><span class='line'>creating build
</span><span class='line'>creating build/temp.macosx-10.9-intel-2.7
</span><span class='line'>creating build/temp.macosx-10.9-intel-2.7/bzrlib
</span><span class='line'>clang -fno-strict-aliasing -fno-common -dynamic -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -pipe -arch x86_64 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c bzrlib/_annotator_pyx.c -o build/temp.macosx-10.9-intel-2.7/bzrlib/_annotator_pyx.o
</span><span class='line'>clang: error: unknown argument: <span class="s1">&#39;-mno-fused-madd&#39;</span> <span class="o">[</span>-Wunused-command-line-argument-hard-error-in-future<span class="o">]</span>
</span><span class='line'>clang: note: this will be a hard error <span class="o">(</span>cannot be downgraded to a warning<span class="o">)</span> in the future
</span><span class='line'>
</span><span class='line'>  Cannot build extension <span class="s2">&quot;bzrlib._annotator_pyx&quot;</span>.
</span><span class='line'>  Use <span class="s2">&quot;build_ext --allow-python-fallback&quot;</span> to use slower python implementations instead.
</span><span class='line'>
</span><span class='line'>error: <span class="nb">command</span> <span class="s1">&#39;clang&#39;</span> failed with <span class="nb">exit </span>status 1
</span><span class='line'>make: *** <span class="o">[</span>extensions<span class="o">]</span> Error 1
</span><span class='line'>
</span><span class='line'>HOMEBREW_VERSION: 0.9.5
</span><span class='line'>HEAD: f1a2a667ebc1c630f03298ac8be5882426e7d454
</span><span class='line'>CPU: quad-core 64-bit sandybridge
</span><span class='line'>OS X: 10.9.2-x86_64
</span><span class='line'>Xcode: 5.1
</span><span class='line'>CLT: 5.1.0.0.1.1393561416
</span><span class='line'>X11: 2.7.5 <span class="o">=</span>&gt; /opt/X11
</span></code></pre></td></tr></table></div></figure>


<h3>Resolution</h3>

<p>Now I was really scratching my head, when I finally realized Apple had just
updated Xcode this week.  Earlier in the day, so had the Homebrew team.  They were
already on the case and had <a href="https://github.com/Homebrew/homebrew/issues/27534#issuecomment-37691498">pushed a fix</a>
whilst I was fighting this issue.</p>

<p>Once more I ran</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew update
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>brew install bzr
</span></code></pre></td></tr></table></div></figure>


<p>And I was met with a successful install.  Relief!</p>

<p>I can now <code>go get</code> with impunity.</p>

<p>If you find your way here, I hope this helps you along your path when debugging
a failed Homebrew install.  A special thanks to the <a href="https://github.com/Homebrew">Homebrew team</a>
for working hard to provide a great product and even better service!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using gvm with golang in your development workflow]]></title>
    <link href="http://www.ascent.io/blog/2014/03/11/gvm-with-golang/"/>
    <updated>2014-03-11T00:32:40-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/11/gvm-with-golang</id>
    <content type="html"><![CDATA[<p>Recently I began work on a project using <a href="http://golang.org/">golang</a>, and it
quickly became apparent I needed a way to map a Go environment to each project
to manage dependencies.  I wasn&rsquo;t able to find everything I needed in a single
location which became the genesis for this post. I try to follow this
<a href="http://golang.org/doc/code.html">pattern</a> set by the golang team at Google.</p>

<!-- more -->


<p>For both OSX and Ubuntu you&rsquo;ll need the following dependencies:</p>

<h4>OSX</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>brew install mercurial bzr
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h4>Ubuntu</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install curl git mercurial make binutils gcc bzr bison -y
</span></code></pre></td></tr></table></div></figure>


<h3>Download and Install GVM</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>bash &lt; &lt;<span class="o">(</span>curl -s https://raw.github.com/moovweb/gvm/master/binscripts/gvm-installer<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This adds the following to the bottom of your .bashrc, which you may want to move
around according to your liking.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># gvm config</span>
</span><span class='line'><span class="o">[[</span>-s <span class="s2">&quot;$HOME/.gvm/scripts/gvm&quot;</span><span class="o">]]</span> <span class="o">&amp;&amp;</span> <span class="nb">source</span> <span class="s2">&quot;$HOME/.gvm/scripts/gvm&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Install Go Environments</h3>

<p>We are going to install version golang version 1.2, but you may install any of the
available versions listed in this command:</p>

<h4>List all Go Versions installed</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gvm listall
</span></code></pre></td></tr></table></div></figure>


<h4>Install Go1.2 and set as default</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gvm install go1.2
</span><span class='line'><span class="nv">$ </span>gvm use go1.2 --default
</span></code></pre></td></tr></table></div></figure>


<h4>Create a Project specific package set</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gvm pkgset create ottemo
</span><span class='line'><span class="nv">$ </span>gvm pkgset use ottemo
</span></code></pre></td></tr></table></div></figure>


<h3>Configure Your Golang Workspace</h3>

<p>Here we are going to download a small project I&rsquo;m working on and assign
a specific gvm package set to be used while developing.  Using gvm like
this helps maintain a clean seperation of concerns by project.  Let&rsquo;s use
the gvm package set we created above.</p>

<h4>List all package sets</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gvm pkgset list
</span><span class='line'>
</span><span class='line'>    <span class="nv">global</span>
</span><span class='line'><span class="o">=</span>&gt;  ottemo
</span></code></pre></td></tr></table></div></figure>


<p>Now lets create a workspace relative to our $HOME directory and set up
the necessary project tree.  We&rsquo;ll use a single command to create our
skeleton directory tree.</p>

<h4>Create Directory Tree</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir -p <span class="nv">$HOME</span>/go/<span class="o">{</span>pkg,bin,src<span class="o">}</span>
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/ottemo/ottemo-go.git <span class="nv">$HOME</span>/go/src/github.com/ottemo/ottemo-go
</span></code></pre></td></tr></table></div></figure>


<p>The very last step is to add workspace&rsquo;s GOPATH to your environment.  We need
to edit our gvm package environment for ottemo.  This will open your favorite
editor specified by the environment variable: $EDITOR</p>

<h4>Edit GOPATH</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>gvm pkgenv ottemo
</span></code></pre></td></tr></table></div></figure>


<p>You want to edit lines 12 and 16, to add your personal workspace tree.</p>

<h4>Edit GOPATH and PATH Environment Variables</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># original line</span>
</span><span class='line'><span class="nb">export </span>GOPATH; <span class="nv">GOPATH</span><span class="o">=</span><span class="s2">&quot;/Users/james/.gvm/pkgsets/go1.2/ottemo:$GOPATH&quot;</span>
</span><span class='line'><span class="c"># new edited line</span>
</span><span class='line'><span class="nb">export </span>GOPATH; <span class="nv">GOPATH</span><span class="o">=</span><span class="s2">&quot;/Users/james/.gvm/pkgsets/go1.2/ottemo:$HOME/go:$GOPATH&quot;</span>
</span><span class='line'><span class="c"># original line</span>
</span><span class='line'><span class="nb">export </span>PATH; <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/Users/james/.gvm/pkgsets/go1.2/ottemo/bin:${GVM_OVERLAY_PREFIX}/bin:${PATH}&quot;</span>
</span><span class='line'><span class="c"># new edited line</span>
</span><span class='line'><span class="nb">export </span>PATH; <span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;/Users/james/.gvm/pkgsets/go1.2/ottemo/bin:${GVM_OVERLAY_PREFIX}/bin:$HOME/go/bin:${PATH}&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Notes</h3>

<p>I use gvm-prompt which comes with GVM to tell me which Golang enviroment I&rsquo;m currently using.<br/>
I&rsquo;ve included my prompt for bash as a sample.</p>

<figure class='code'><figcaption><span>Sample Prompt Definition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span><span class="o">[</span><span class="s2">&quot;$(whoami)&quot;</span><span class="o">=</span><span class="s1">&#39;root&#39;</span><span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span><span class="s1">&#39;\e[0;31m&#39;</span>
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span><span class="s1">&#39;\e[0;32m&#39;</span>
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span><span class="s1">&#39;\e[0m&#39;</span>
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span><span class="s1">&#39;$(__git_ps1 &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span><span class="s1">&#39;$(gvm-prompt &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;[${RED}\u@\h:\W \t.\d${GREEN}${GIT_BRANCH}$NC ${GVM}] \n &gt;&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span><span class="s1">&#39;\e[0;31m&#39;</span>
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span><span class="s1">&#39;\e[0;32m&#39;</span>
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span><span class="s1">&#39;\e[0m&#39;</span>
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span><span class="s1">&#39;$(__git_ps1 &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span><span class="s1">&#39;$(gvm-prompt &quot;(%s)&quot;)&#39;</span>
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span><span class="s2">&quot;[${GREEN}\u@\h:\W ${RED}${GIT_BRANCH}$NC ${GVM}] \n &gt;&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
</feed>
