<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: How-To | ascent.io]]></title>
  <link href="http://www.ascent.io/blog/categories/how-to/atom.xml" rel="self"/>
  <link href="http://www.ascent.io/"/>
  <updated>2014-03-26T13:53:59-07:00</updated>
  <id>http://www.ascent.io/</id>
  <author>
    <name><![CDATA[James Vastbinder]]></name>
    <email><![CDATA[james@ascent.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run Fmt Upon Save in Vim]]></title>
    <link href="http://www.ascent.io/blog/2014/03/26/go-fmt-vim/"/>
    <updated>2014-03-26T07:18:32-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/26/go-fmt-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with Go for a few weeks now and thought I had vim set up to
format my code using Fmt every time I saved.  I did and I didn&rsquo;t.</p>

<p>You see, we are working on the authorization piece of <a href="https://github.com/ottemo/ottemo-go">Ottemo</a> and since many
projects can benefit from the work we are doing, we wanted to submit our
OAUTH2 work to the <a href="http://martini.codegangsta.io/">Martini project</a>.</p>

<p>And, as should be, the source code needed to be formatted according to <a href="http://golang.org/doc/effective_go.html#formatting">Golang
standards</a>.</p>

<p>The one liner, which will format your code is below:</p>

<p><code>vim .vimrc
" format golang upon save
autocmd FileType go autocmd BufWritePre &lt;buffer&gt; Fmt
</code></p>

<!-- more -->


<p>However, there is a little more to the puzzle. In most cases I prefer spaces
to tabs, but this is not a discussion on tabs vs. spaces.  Somehow this formatting was
not being set upon save.  No matter what I did, it still saved the file replacing
tabs with spaces and an indention of 2 spaces.</p>

<p>I quickly found the culprit.  In my .vimrc I have my default settings for
managing tabs and spaces to default to 2 spaces and to convert tabs to
spaces when I save a file.</p>

<p><code>vim
set tabstop=2             " number of spaces that a &lt;tab&gt; represents in a file
set shiftwidth=2          " number of spaces to use for (auto)indent
set expandtab             " expand tabs to spaces
set softtabstop=2         " number of spaces that a &lt;tab&gt; represents
set smarttab              " smart handling of tabs when inserting or deleting
</code></p>

<p>This meant that when I opened a Golang formatted file, as soon as I saved it,
gone were the tabs in my Golang files.  I wanted to adhere to the standard, so I
needed to find a way to make an exception for Go source files.  According to
<a href="http://golang.org/doc/effective_go.html#formatting">the Go formatting standards</a> they use tabs
with a tabstop of 8.</p>

<p>To make an exception for Go source code, I am using the <code>setlocal</code> identifier
to apply the exception to my global settings. Here is the result:</p>

<p><code>vim
autocmd FileType go setlocal shiftwidth=8 tabstop=8 softtabstop=8     " set tab stops to 8 for Go files
autocmd FileType go setlocal noexpandtab                              " don't expand tabs to spaces for Go files
</code></p>

<p>This fixed my problems when saving Go formatted files and saves me from running
<code>go Fmt</code> on my files outside of vim.</p>

<p>Here is my final set of vim customizations:</p>

<p>``` vim .vimrc
&ldquo; Go tagbar config
let g:tagbar_type_go = {</p>

<pre><code>\ 'ctagstype' : 'go',
\ 'kinds'     : [
    \ 'p:package',
    \ 'i:imports:1',
    \ 'c:constants',
    \ 'v:variables',
    \ 't:types',
    \ 'n:interfaces',
    \ 'w:fields',
    \ 'e:embedded',
    \ 'm:methods',
    \ 'r:constructor',
    \ 'f:functions'
\ ],
\ 'sro' : '.',
\ 'kind2scope' : {
    \ 't' : 'ctype',
    \ 'n' : 'ntype'
\ },
\ 'scope2kind' : {
    \ 'ctype' : 't',
    \ 'ntype' : 'n'
\ },
\ 'ctagsbin'  : 'gotags',
\ 'ctagsargs' : '-sort -silent'
</code></pre>

<p>\ }</p>

<p>&ldquo; Golang customizations
&rdquo;
&ldquo; generate go ctags upon save
au BufWritePost <em>.go silent! !ctags -R &mdash;exclude=</em>.js,*.html &amp;      <br/>
autocmd FileType go autocmd BufWritePre <buffer> Fmt                  &rdquo; format files upon save in GO
let g:syntastic_go_checkers = [&lsquo;go&rsquo;,&lsquo;golint&rsquo;]                         &ldquo; use golint for syntax checking in Go
let g:godef_same_file_in_same_window=1                                &rdquo; when in go, move the cursor if in same file
autocmd FileType go setlocal shiftwidth=8 tabstop=8 softtabstop=8     &ldquo; set tab stops to 8 for Go files
autocmd FileType go setlocal noexpandtab                              &rdquo; don&rsquo;t expand tabs to spaces for Go files
```</p>

<p>If you see any issues with my customizations or think I should do something
differently, let me know.</p>

<p>Cheers</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Personal Bash Prompt]]></title>
    <link href="http://www.ascent.io/blog/2014/03/17/bash-prompt/"/>
    <updated>2014-03-17T12:10:00-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/17/bash-prompt</id>
    <content type="html"><![CDATA[<p>I like to have my prompt tell me several things: current directory, who I am
logged in as, current git branch and language specific context.  Recently, I&rsquo;ve been
jumping between ruby, python, node and golang as we decide upon the primary engine
for Ottemo.  It has been an interesting process as we want <a href="http://www.ottemo.io">Ottemo</a>
 to be rock-solid and secure as well as super easy to setup and of course, blindingly fast.</p>

<!-- more -->


<p>This vetting process is better served in a future post as I just want to provide
a sample light-weight prompt for others to follow, today.</p>

<p>I enjoy a color prompt, so the first thing I do is enable 256 colors in my terminal
emulator:</p>

<p>``` bash .bash_profile</p>

<h1>uncomment for a colored prompt</h1>

<p>force_color_prompt=yes
export GREP_OPTIONS=&lsquo;&mdash;color=auto&rsquo;
export CLICOLOR=1</p>

<h1>set a fancy prompt (non-color, unless we know we &ldquo;want&rdquo; color)</h1>

<p>case &ldquo;$TERM&rdquo; in</p>

<pre><code>xterm-color) color_prompt=yes;;
</code></pre>

<p>esac</p>

<p>if [ -n &ldquo;$force_color_prompt&rdquo; ]; then</p>

<pre><code>if [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; then
color_prompt=yes
else
color_prompt=
fi
</code></pre>

<p>fi
```</p>

<p>Next, I want to distinguish between when I&rsquo;m logged in as root on computers
I control, so I change the colors in my prompt for my account and root&rsquo;s account.  You
can find a great list of colors <a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html">available here</a>.</p>

<p>``` bash showme_colors.bash</p>

<h1>!/bin/bash</h1>

<p>#</p>

<h1>This file echoes a bunch of color codes to the</h1>

<h1>terminal to demonstrate what&rsquo;s available.  Each</h1>

<h1>line is the color code of one foreground color,</h1>

<h1>out of 17 (default + 16 escapes), followed by a</h1>

<h1>test use of that color on all nine background</h1>

<h1>colors (default + 8 escapes).</h1>

<p>#</p>

<p>T=&lsquo;gYw&rsquo;   # The test text</p>

<p>echo -e &ldquo;\n                 40m     41m     42m     43m\</p>

<pre><code> 44m     45m     46m     47m";
</code></pre>

<p>for FGs in &lsquo;    m&rsquo; &lsquo;   1m&rsquo; &lsquo;  30m&rsquo; &lsquo;1;30m&rsquo; &lsquo;  31m&rsquo; &lsquo;1;31m&rsquo; &lsquo;  32m&rsquo; \</p>

<pre><code>       '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
       '  36m' '1;36m' '  37m' '1;37m';
</code></pre>

<p>  do FG=${FGs// /}
  echo -en &ldquo; $FGs \033[$FG  $T  &rdquo;
  for BG in 40m 41m 42m 43m 44m 45m 46m 47m;</p>

<pre><code>do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
</code></pre>

<p>  done
  echo;
done
echo
```</p>

<p>Here is the excerpt from my dotfiles where I set my prompt.  Its not pretty but
it is functional.</p>

<p>``` bash .bash_profile</p>

<h1>give root a different colored prompt so I have a visual cue</h1>

<p>if [ &ldquo;$(whoami)&rdquo; = &lsquo;root&rsquo; ]; then
  RED=&lsquo;\e[0;31m&rsquo;
  GREEN=&lsquo;\e[0;32m&rsquo;
  NC=&lsquo;\e[0m&rsquo;
  GIT_BRANCH=&lsquo;$(<strong>git_ps1 &ldquo;(%s)&rdquo;)&rsquo;
  GVM=&lsquo;$(gvm-prompt &ldquo;(%s)&rdquo;)&rsquo;
  PS1=&ldquo;[${RED}\u@\h:\W \t.\d${GREEN}${GIT_BRANCH}${NC} ${GVM}] \n > &rdquo;
else
  RED=&lsquo;\e[0;31m&rsquo;
  GREEN=&lsquo;\e[0;32m&rsquo;
  NC=&lsquo;\e[0m&rsquo;
  GIT_BRANCH=&lsquo;$(</strong>git_ps1 &ldquo;(%s)&rdquo;)&rsquo;
  GVM=&lsquo;$(gvm-prompt &ldquo;(%s)&rdquo;)&rsquo;
  PS1=&ldquo;[${GREEN}\u@\h:\W ${RED}${GIT_BRANCH}${NC} ${GVM}] \n > &rdquo;
fi
unset color_prompt force_color_prompt
```</p>

<p>And finally an example of my current bash prompt:</p>

<p><img src="/images/bash-prompt/shell_prompt.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using gvm with golang in your development workflow]]></title>
    <link href="http://www.ascent.io/blog/2014/03/11/gvm-with-golang/"/>
    <updated>2014-03-11T00:32:40-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/11/gvm-with-golang</id>
    <content type="html"><![CDATA[<p>Recently I began work on a project using <a href="http://golang.org/">golang</a>, and it
quickly became apparent I needed a way to map a Go environment to each project
to manage dependencies.  I wasn&rsquo;t able to find everything I needed in a single
location which became the genesis for this post. I try to follow this
<a href="http://golang.org/doc/code.html">pattern</a> set by the golang team at Google.</p>

<!-- more -->


<p>For both OSX and Ubuntu you&rsquo;ll need the following dependencies:</p>

<h4>OSX</h4>

<p><code>bash  
$ brew install mercurial bzr
</code></p>

<h4>Ubuntu</h4>

<p><code>
$ sudo apt-get update
$ sudo apt-get install curl git mercurial make binutils gcc bzr bison -y
</code></p>

<h3>Download and Install GVM</h3>

<p><code>bash
$ bash &lt; &lt;(curl -s https://raw.github.com/moovweb/gvm/master/binscripts/gvm-installer)
</code>
This adds the following to the bottom of your .bashrc, which you may want to move
around according to your liking.</p>

<p>``` bash</p>

<h1>gvm config</h1>

<p>[[-s &ldquo;$HOME/.gvm/scripts/gvm&rdquo;]] &amp;&amp; source &ldquo;$HOME/.gvm/scripts/gvm&rdquo;
```</p>

<h3>Install Go Environments</h3>

<p>We are going to install version golang version 1.2, but you may install any of the
available versions listed in this command:</p>

<h4>List all Go Versions installed</h4>

<p><code>bash
$ gvm listall
</code></p>

<h4>Install Go1.2 and set as default</h4>

<p><code>bash
$ gvm install go1.2
$ gvm use go1.2 --default
</code></p>

<h4>Create a Project specific package set</h4>

<p><code>bash
$ gvm pkgset create ottemo
$ gvm pkgset use ottemo
</code></p>

<h3>Configure Your Golang Workspace</h3>

<p>Here we are going to download a small project I&rsquo;m working on and assign
a specific gvm package set to be used while developing.  Using gvm like
this helps maintain a clean seperation of concerns by project.  Let&rsquo;s use
the gvm package set we created above.</p>

<h4>List all package sets</h4>

<p>``` bash
$ gvm pkgset list</p>

<pre><code>global
</code></pre>

<p>=>  ottemo
```</p>

<p>Now lets create a workspace relative to our $HOME directory and set up
the necessary project tree.  We&rsquo;ll use a single command to create our
skeleton directory tree.</p>

<h4>Create Directory Tree</h4>

<p><code>bash
$ mkdir -p $HOME/go/{pkg,bin,src}
$ git clone https://github.com/ottemo/ottemo-go.git $HOME/go/src/github.com/ottemo/ottemo-go
</code></p>

<p>The very last step is to add workspace&rsquo;s GOPATH to your environment.  We need
to edit our gvm package environment for ottemo.  This will open your favorite
editor specified by the environment variable: $EDITOR</p>

<h4>Edit GOPATH</h4>

<p><code>bash
$ gvm pkgenv ottemo
</code></p>

<p>You want to edit lines 12 and 16, to add your personal workspace tree.</p>

<h4>Edit GOPATH and PATH Environment Variables</h4>

<p>``` bash</p>

<h1>original line</h1>

<p>export GOPATH; GOPATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo:$GOPATH&rdquo;</p>

<h1>new edited line</h1>

<p>export GOPATH; GOPATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo:$HOME/go:$GOPATH&rdquo;</p>

<h1>original line</h1>

<p>export PATH; PATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo/bin:${GVM_OVERLAY_PREFIX}/bin:${PATH}&rdquo;</p>

<h1>new edited line</h1>

<p>export PATH; PATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo/bin:${GVM_OVERLAY_PREFIX}/bin:$HOME/go/bin:${PATH}&rdquo;
```</p>

<h3>Notes</h3>

<p>I use gvm-prompt which comes with GVM to tell me which Golang enviroment I&rsquo;m currently using.<br/>
I&rsquo;ve included my prompt for bash as a sample.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Prompt Definition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span><span class="o">[</span>&amp;ldquo;<span class="k">$(</span>whoami<span class="k">)</span>&amp;rdquo;<span class="o">=</span>&amp;lsquo;root&amp;rsquo;<span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;31m&amp;rsquo;
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;32m&amp;rsquo;
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0m&amp;rsquo;
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>&lt;strong&gt;git_ps1 &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>gvm-prompt &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span>&amp;ldquo;<span class="o">[</span><span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="se">\u</span>@<span class="se">\h</span>:<span class="se">\W</span> <span class="se">\t</span>.<span class="se">\d</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}${</span><span class="nv">GIT_BRANCH</span><span class="k">}</span><span class="nv">$NC</span> <span class="k">${</span><span class="nv">GVM</span><span class="k">}</span><span class="o">]</span> <span class="se">\n</span> &gt;&amp;rdquo;
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;31m&amp;rsquo;
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;32m&amp;rsquo;
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0m&amp;rsquo;
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>&lt;/strong&gt;git_ps1 &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>gvm-prompt &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span>&amp;ldquo;<span class="o">[</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}</span><span class="se">\u</span>@<span class="se">\h</span>:<span class="se">\W</span> <span class="k">${</span><span class="nv">RED</span><span class="k">}${</span><span class="nv">GIT_BRANCH</span><span class="k">}</span><span class="nv">$NC</span> <span class="k">${</span><span class="nv">GVM</span><span class="k">}</span><span class="o">]</span> <span class="se">\n</span> &gt;&amp;rdquo;
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
