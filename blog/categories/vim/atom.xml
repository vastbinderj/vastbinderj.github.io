<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Vim | ascent.io]]></title>
  <link href="http://www.ascent.io/blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://www.ascent.io/"/>
  <updated>2014-03-26T13:53:59-07:00</updated>
  <id>http://www.ascent.io/</id>
  <author>
    <name><![CDATA[James Vastbinder]]></name>
    <email><![CDATA[james@ascent.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Run Fmt Upon Save in Vim]]></title>
    <link href="http://www.ascent.io/blog/2014/03/26/go-fmt-vim/"/>
    <updated>2014-03-26T07:18:32-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/26/go-fmt-vim</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working with Go for a few weeks now and thought I had vim set up to
format my code using Fmt every time I saved.  I did and I didn&rsquo;t.</p>

<p>You see, we are working on the authorization piece of <a href="https://github.com/ottemo/ottemo-go">Ottemo</a> and since many
projects can benefit from the work we are doing, we wanted to submit our
OAUTH2 work to the <a href="http://martini.codegangsta.io/">Martini project</a>.</p>

<p>And, as should be, the source code needed to be formatted according to <a href="http://golang.org/doc/effective_go.html#formatting">Golang
standards</a>.</p>

<p>The one liner, which will format your code is below:</p>

<p><code>vim .vimrc
" format golang upon save
autocmd FileType go autocmd BufWritePre &lt;buffer&gt; Fmt
</code></p>

<!-- more -->


<p>However, there is a little more to the puzzle. In most cases I prefer spaces
to tabs, but this is not a discussion on tabs vs. spaces.  Somehow this formatting was
not being set upon save.  No matter what I did, it still saved the file replacing
tabs with spaces and an indention of 2 spaces.</p>

<p>I quickly found the culprit.  In my .vimrc I have my default settings for
managing tabs and spaces to default to 2 spaces and to convert tabs to
spaces when I save a file.</p>

<p><code>vim
set tabstop=2             " number of spaces that a &lt;tab&gt; represents in a file
set shiftwidth=2          " number of spaces to use for (auto)indent
set expandtab             " expand tabs to spaces
set softtabstop=2         " number of spaces that a &lt;tab&gt; represents
set smarttab              " smart handling of tabs when inserting or deleting
</code></p>

<p>This meant that when I opened a Golang formatted file, as soon as I saved it,
gone were the tabs in my Golang files.  I wanted to adhere to the standard, so I
needed to find a way to make an exception for Go source files.  According to
<a href="http://golang.org/doc/effective_go.html#formatting">the Go formatting standards</a> they use tabs
with a tabstop of 8.</p>

<p>To make an exception for Go source code, I am using the <code>setlocal</code> identifier
to apply the exception to my global settings. Here is the result:</p>

<p><code>vim
autocmd FileType go setlocal shiftwidth=8 tabstop=8 softtabstop=8     " set tab stops to 8 for Go files
autocmd FileType go setlocal noexpandtab                              " don't expand tabs to spaces for Go files
</code></p>

<p>This fixed my problems when saving Go formatted files and saves me from running
<code>go Fmt</code> on my files outside of vim.</p>

<p>Here is my final set of vim customizations:</p>

<p>``` vim .vimrc
&ldquo; Go tagbar config
let g:tagbar_type_go = {</p>

<pre><code>\ 'ctagstype' : 'go',
\ 'kinds'     : [
    \ 'p:package',
    \ 'i:imports:1',
    \ 'c:constants',
    \ 'v:variables',
    \ 't:types',
    \ 'n:interfaces',
    \ 'w:fields',
    \ 'e:embedded',
    \ 'm:methods',
    \ 'r:constructor',
    \ 'f:functions'
\ ],
\ 'sro' : '.',
\ 'kind2scope' : {
    \ 't' : 'ctype',
    \ 'n' : 'ntype'
\ },
\ 'scope2kind' : {
    \ 'ctype' : 't',
    \ 'ntype' : 'n'
\ },
\ 'ctagsbin'  : 'gotags',
\ 'ctagsargs' : '-sort -silent'
</code></pre>

<p>\ }</p>

<p>&ldquo; Golang customizations
&rdquo;
&ldquo; generate go ctags upon save
au BufWritePost <em>.go silent! !ctags -R &mdash;exclude=</em>.js,*.html &amp;      <br/>
autocmd FileType go autocmd BufWritePre <buffer> Fmt                  &rdquo; format files upon save in GO
let g:syntastic_go_checkers = [&lsquo;go&rsquo;,&lsquo;golint&rsquo;]                         &ldquo; use golint for syntax checking in Go
let g:godef_same_file_in_same_window=1                                &rdquo; when in go, move the cursor if in same file
autocmd FileType go setlocal shiftwidth=8 tabstop=8 softtabstop=8     &ldquo; set tab stops to 8 for Go files
autocmd FileType go setlocal noexpandtab                              &rdquo; don&rsquo;t expand tabs to spaces for Go files
```</p>

<p>If you see any issues with my customizations or think I should do something
differently, let me know.</p>

<p>Cheers</p>
]]></content>
  </entry>
  
</feed>
