<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OSX | ascent.io]]></title>
  <link href="http://www.ascent.io/blog/categories/osx/atom.xml" rel="self"/>
  <link href="http://www.ascent.io/"/>
  <updated>2014-03-26T09:47:58-07:00</updated>
  <id>http://www.ascent.io/</id>
  <author>
    <name><![CDATA[James Vastbinder]]></name>
    <email><![CDATA[james@ascent.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Personal Bash Prompt]]></title>
    <link href="http://www.ascent.io/blog/2014/03/17/bash-prompt/"/>
    <updated>2014-03-17T12:10:00-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/17/bash-prompt</id>
    <content type="html"><![CDATA[<p>I like to have my prompt tell me several things: current directory, who I am
logged in as, current git branch and language specific context.  Recently, I&rsquo;ve been
jumping between ruby, python, node and golang as we decide upon the primary engine
for Ottemo.  It has been an interesting process as we want <a href="http://www.ottemo.io">Ottemo</a>
 to be rock-solid and secure as well as super easy to setup and of course, blindingly fast.</p>

<!-- more -->


<p>This vetting process is better served in a future post as I just want to provide
a sample light-weight prompt for others to follow, today.</p>

<p>I enjoy a color prompt, so the first thing I do is enable 256 colors in my terminal
emulator:</p>

<p>``` bash .bash_profile</p>

<h1>uncomment for a colored prompt</h1>

<p>force_color_prompt=yes
export GREP_OPTIONS=&lsquo;&mdash;color=auto&rsquo;
export CLICOLOR=1</p>

<h1>set a fancy prompt (non-color, unless we know we &ldquo;want&rdquo; color)</h1>

<p>case &ldquo;$TERM&rdquo; in</p>

<pre><code>xterm-color) color_prompt=yes;;
</code></pre>

<p>esac</p>

<p>if [ -n &ldquo;$force_color_prompt&rdquo; ]; then</p>

<pre><code>if [ -x /usr/bin/tput ] &amp;&amp; tput setaf 1 &gt;&amp;/dev/null; then
color_prompt=yes
else
color_prompt=
fi
</code></pre>

<p>fi
```</p>

<p>Next, I want to distinguish between when I&rsquo;m logged in as root on computers
I control, so I change the colors in my prompt for my account and root&rsquo;s account.  You
can find a great list of colors <a href="http://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html">available here</a>.</p>

<p>``` bash showme_colors.bash</p>

<h1>!/bin/bash</h1>

<p>#</p>

<h1>This file echoes a bunch of color codes to the</h1>

<h1>terminal to demonstrate what&rsquo;s available.  Each</h1>

<h1>line is the color code of one foreground color,</h1>

<h1>out of 17 (default + 16 escapes), followed by a</h1>

<h1>test use of that color on all nine background</h1>

<h1>colors (default + 8 escapes).</h1>

<p>#</p>

<p>T=&lsquo;gYw&rsquo;   # The test text</p>

<p>echo -e &ldquo;\n                 40m     41m     42m     43m\</p>

<pre><code> 44m     45m     46m     47m";
</code></pre>

<p>for FGs in &lsquo;    m&rsquo; &lsquo;   1m&rsquo; &lsquo;  30m&rsquo; &lsquo;1;30m&rsquo; &lsquo;  31m&rsquo; &lsquo;1;31m&rsquo; &lsquo;  32m&rsquo; \</p>

<pre><code>       '1;32m' '  33m' '1;33m' '  34m' '1;34m' '  35m' '1;35m' \
       '  36m' '1;36m' '  37m' '1;37m';
</code></pre>

<p>  do FG=${FGs// /}
  echo -en &ldquo; $FGs \033[$FG  $T  &rdquo;
  for BG in 40m 41m 42m 43m 44m 45m 46m 47m;</p>

<pre><code>do echo -en "$EINS \033[$FG\033[$BG  $T  \033[0m";
</code></pre>

<p>  done
  echo;
done
echo
```</p>

<p>Here is the excerpt from my dotfiles where I set my prompt.  Its not pretty but
it is functional.</p>

<p>``` bash .bash_profile</p>

<h1>give root a different colored prompt so I have a visual cue</h1>

<p>if [ &ldquo;$(whoami)&rdquo; = &lsquo;root&rsquo; ]; then
  RED=&lsquo;\e[0;31m&rsquo;
  GREEN=&lsquo;\e[0;32m&rsquo;
  NC=&lsquo;\e[0m&rsquo;
  GIT_BRANCH=&lsquo;$(<strong>git_ps1 &ldquo;(%s)&rdquo;)&rsquo;
  GVM=&lsquo;$(gvm-prompt &ldquo;(%s)&rdquo;)&rsquo;
  PS1=&ldquo;[${RED}\u@\h:\W \t.\d${GREEN}${GIT_BRANCH}${NC} ${GVM}] \n > &rdquo;
else
  RED=&lsquo;\e[0;31m&rsquo;
  GREEN=&lsquo;\e[0;32m&rsquo;
  NC=&lsquo;\e[0m&rsquo;
  GIT_BRANCH=&lsquo;$(</strong>git_ps1 &ldquo;(%s)&rdquo;)&rsquo;
  GVM=&lsquo;$(gvm-prompt &ldquo;(%s)&rdquo;)&rsquo;
  PS1=&ldquo;[${GREEN}\u@\h:\W ${RED}${GIT_BRANCH}${NC} ${GVM}] \n > &rdquo;
fi
unset color_prompt force_color_prompt
```</p>

<p>And finally an example of my current bash prompt:</p>

<p><img src="/images/bash-prompt/shell_prompt.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging a Homebrew Failed Install]]></title>
    <link href="http://www.ascent.io/blog/2014/03/14/debugging-a-homebrew-failed-install/"/>
    <updated>2014-03-14T13:10:30-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/14/debugging-a-homebrew-failed-install</id>
    <content type="html"><![CDATA[<p>This morning I wanted to install a Go environment on my Mac Air, only to be
greeted with this ominous error from homebrew:</p>

<p>``` bash
$ brew install bzr
==> Downloading <a href="https://launchpad.net/bzr/2.6/2.6.0/+download/bzr-2.6.0.tar.gz">https://launchpad.net/bzr/2.6/2.6.0/+download/bzr-2.6.0.tar.gz</a>
Already downloaded: /Library/Caches/Homebrew/bazaar-2.6.0.tar.gz
==> make man1/bzr.1
==> make
Cannot build extension &ldquo;bzrlib._annotator_pyx&rdquo;.
Use &ldquo;build_ext &mdash;allow-python-fallback&rdquo; to use slower python implementations instead.</p>

<p>error: command &lsquo;clang&rsquo; failed with exit status 1
make: *** [extensions] Error 1</p>

<p>READ THIS: <a href="https://github.com/Homebrew/homebrew/wiki/troubleshooting">https://github.com/Homebrew/homebrew/wiki/troubleshooting</a>
```</p>

<!-- more -->


<p>Now I had just built out several different Golang development environments earlier
in the week.  Several searches on Google weren&rsquo;t providing any relief or
guidance.</p>

<p>My first step was to update homebrew.</p>

<p><code>bash
$ brew update  &amp;&amp; brew upgrade
</code></p>

<p>No relief there either&hellip;.  At least not yet.  I then turned up the logging and
sent it to a gist.</p>

<h3>Send debugging data to a gist</h3>

<p><code>bash
brew gist-logs --config --doctor bzr
</code></p>

<p>Here is the output I found:</p>

<p>```
building extension modules.
python setup.py build_ext -i
No Cython, trying Pyrex&hellip;</p>

<p>The python package &lsquo;Pyrex&rsquo; is not available. If the .c files are available,
they will be built, but modifying the .pyx files will not rebuild them.</p>

<p>running build_ext
building &lsquo;bzrlib.<em>annotator_pyx&rsquo; extension
creating build
creating build/temp.macosx-10.9-intel-2.7
creating build/temp.macosx-10.9-intel-2.7/bzrlib
clang -fno-strict-aliasing -fno-common -dynamic -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -pipe -arch x86_64 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c bzrlib/</em>annotator_pyx.c -o build/temp.macosx-10.9-intel-2.7/bzrlib/_annotator_pyx.o
clang: error: unknown argument: &lsquo;-mno-fused-madd&rsquo; [-Wunused-command-line-argument-hard-error-in-future]
clang: note: this will be a hard error (cannot be downgraded to a warning) in the future</p>

<p>  Cannot build extension &ldquo;bzrlib._annotator_pyx&rdquo;.
  Use &ldquo;build_ext &mdash;allow-python-fallback&rdquo; to use slower python implementations instead.</p>

<p>error: command &lsquo;clang&rsquo; failed with exit status 1
make: *** [extensions] Error 1</p>

<p>HOMEBREW_VERSION: 0.9.5
HEAD: f1a2a667ebc1c630f03298ac8be5882426e7d454
CPU: quad-core 64-bit sandybridge
OS X: 10.9.2-x86_64
Xcode: 5.1
CLT: 5.1.0.0.1.1393561416
X11: 2.7.5 => /opt/X11
```
This led me to belive I needed to install either Cython or Pyrex.  I decided
upon attempting to install Pyrex first.  I quickly learned at the Bazaar
website they force Mac users to use Python 2.6 with their install scripts.</p>

<p>This meant I had to use sudo to get Pyrex to install&hellip; I prefer to localize
my development environments to a user to reduce any possible future dependency issues.</p>

<p><code>bash
$ sudo /usr/bin/easy_install-2.6 pyrex
</code></p>

<p>One more attempt at installing Bazaar with Homebrew left me with this error
during make:</p>

<p>```
$ brew gist-logs &mdash;config &mdash;doctor bzr</p>

<p>building extension modules.
python setup.py build_ext -i
running build_ext
skipping &lsquo;bzrlib/<em>annotator_pyx.c&rsquo; Cython extension (up-to-date)
building &lsquo;bzrlib.</em>annotator_pyx&rsquo; extension
creating build
creating build/temp.macosx-10.9-intel-2.7
creating build/temp.macosx-10.9-intel-2.7/bzrlib
clang -fno-strict-aliasing -fno-common -dynamic -g -Os -pipe -fno-common -fno-strict-aliasing -fwrapv -mno-fused-madd -DENABLE_DTRACE -DMACOSX -DNDEBUG -Wall -Wstrict-prototypes -Wshorten-64-to-32 -DNDEBUG -g -fwrapv -Os -Wall -Wstrict-prototypes -DENABLE_DTRACE -pipe -arch x86_64 -I/System/Library/Frameworks/Python.framework/Versions/2.7/include/python2.7 -c bzrlib/<em>annotator_pyx.c -o build/temp.macosx-10.9-intel-2.7/bzrlib/</em>annotator_pyx.o
clang: error: unknown argument: &lsquo;-mno-fused-madd&rsquo; [-Wunused-command-line-argument-hard-error-in-future]
clang: note: this will be a hard error (cannot be downgraded to a warning) in the future</p>

<p>  Cannot build extension &ldquo;bzrlib._annotator_pyx&rdquo;.
  Use &ldquo;build_ext &mdash;allow-python-fallback&rdquo; to use slower python implementations instead.</p>

<p>error: command &lsquo;clang&rsquo; failed with exit status 1
make: *** [extensions] Error 1</p>

<p>HOMEBREW_VERSION: 0.9.5
HEAD: f1a2a667ebc1c630f03298ac8be5882426e7d454
CPU: quad-core 64-bit sandybridge
OS X: 10.9.2-x86_64
Xcode: 5.1
CLT: 5.1.0.0.1.1393561416
X11: 2.7.5 => /opt/X11
```</p>

<h3>Resolution</h3>

<p>Now I was really scratching my head, when I finally realized Apple had just
updated Xcode this week.  Earlier in the day, so had the Homebrew team.  They were
already on the case and had <a href="https://github.com/Homebrew/homebrew/issues/27534#issuecomment-37691498">pushed a fix</a>
whilst I was fighting this issue.</p>

<p>Once more I ran
``` bash
$ brew update</p>

<p>$ brew install bzr
```</p>

<p>And I was met with a successful install.  Relief!</p>

<p>I can now <code>go get</code> with impunity.</p>

<p>If you find your way here, I hope this helps you along your path when debugging
a failed Homebrew install.  A special thanks to the <a href="https://github.com/Homebrew">Homebrew team</a>
for working hard to provide a great product and even better service!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[using gvm with golang in your development workflow]]></title>
    <link href="http://www.ascent.io/blog/2014/03/11/gvm-with-golang/"/>
    <updated>2014-03-11T00:32:40-07:00</updated>
    <id>http://www.ascent.io/blog/2014/03/11/gvm-with-golang</id>
    <content type="html"><![CDATA[<p>Recently I began work on a project using <a href="http://golang.org/">golang</a>, and it
quickly became apparent I needed a way to map a Go environment to each project
to manage dependencies.  I wasn&rsquo;t able to find everything I needed in a single
location which became the genesis for this post. I try to follow this
<a href="http://golang.org/doc/code.html">pattern</a> set by the golang team at Google.</p>

<!-- more -->


<p>For both OSX and Ubuntu you&rsquo;ll need the following dependencies:</p>

<h4>OSX</h4>

<p><code>bash  
$ brew install mercurial bzr
</code></p>

<h4>Ubuntu</h4>

<p><code>
$ sudo apt-get update
$ sudo apt-get install curl git mercurial make binutils gcc bzr bison -y
</code></p>

<h3>Download and Install GVM</h3>

<p><code>bash
$ bash &lt; &lt;(curl -s https://raw.github.com/moovweb/gvm/master/binscripts/gvm-installer)
</code>
This adds the following to the bottom of your .bashrc, which you may want to move
around according to your liking.</p>

<p>``` bash</p>

<h1>gvm config</h1>

<p>[[-s &ldquo;$HOME/.gvm/scripts/gvm&rdquo;]] &amp;&amp; source &ldquo;$HOME/.gvm/scripts/gvm&rdquo;
```</p>

<h3>Install Go Environments</h3>

<p>We are going to install version golang version 1.2, but you may install any of the
available versions listed in this command:</p>

<h4>List all Go Versions installed</h4>

<p><code>bash
$ gvm listall
</code></p>

<h4>Install Go1.2 and set as default</h4>

<p><code>bash
$ gvm install go1.2
$ gvm use go1.2 --default
</code></p>

<h4>Create a Project specific package set</h4>

<p><code>bash
$ gvm pkgset create ottemo
$ gvm pkgset use ottemo
</code></p>

<h3>Configure Your Golang Workspace</h3>

<p>Here we are going to download a small project I&rsquo;m working on and assign
a specific gvm package set to be used while developing.  Using gvm like
this helps maintain a clean seperation of concerns by project.  Let&rsquo;s use
the gvm package set we created above.</p>

<h4>List all package sets</h4>

<p>``` bash
$ gvm pkgset list</p>

<pre><code>global
</code></pre>

<p>=>  ottemo
```</p>

<p>Now lets create a workspace relative to our $HOME directory and set up
the necessary project tree.  We&rsquo;ll use a single command to create our
skeleton directory tree.</p>

<h4>Create Directory Tree</h4>

<p><code>bash
$ mkdir -p $HOME/go/{pkg,bin,src}
$ git clone https://github.com/ottemo/ottemo-go.git $HOME/go/src/github.com/ottemo/ottemo-go
</code></p>

<p>The very last step is to add workspace&rsquo;s GOPATH to your environment.  We need
to edit our gvm package environment for ottemo.  This will open your favorite
editor specified by the environment variable: $EDITOR</p>

<h4>Edit GOPATH</h4>

<p><code>bash
$ gvm pkgenv ottemo
</code></p>

<p>You want to edit lines 12 and 16, to add your personal workspace tree.</p>

<h4>Edit GOPATH and PATH Environment Variables</h4>

<p>``` bash</p>

<h1>original line</h1>

<p>export GOPATH; GOPATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo:$GOPATH&rdquo;</p>

<h1>new edited line</h1>

<p>export GOPATH; GOPATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo:$HOME/go:$GOPATH&rdquo;</p>

<h1>original line</h1>

<p>export PATH; PATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo/bin:${GVM_OVERLAY_PREFIX}/bin:${PATH}&rdquo;</p>

<h1>new edited line</h1>

<p>export PATH; PATH=&ldquo;/Users/james/.gvm/pkgsets/go1.2/ottemo/bin:${GVM_OVERLAY_PREFIX}/bin:$HOME/go/bin:${PATH}&rdquo;
```</p>

<h3>Notes</h3>

<p>I use gvm-prompt which comes with GVM to tell me which Golang enviroment I&rsquo;m currently using.<br/>
I&rsquo;ve included my prompt for bash as a sample.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Sample Prompt Definition </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span><span class="o">[</span>&amp;ldquo;<span class="k">$(</span>whoami<span class="k">)</span>&amp;rdquo;<span class="o">=</span>&amp;lsquo;root&amp;rsquo;<span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;31m&amp;rsquo;
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;32m&amp;rsquo;
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0m&amp;rsquo;
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>&lt;strong&gt;git_ps1 &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>gvm-prompt &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span>&amp;ldquo;<span class="o">[</span><span class="k">${</span><span class="nv">RED</span><span class="k">}</span><span class="se">\u</span>@<span class="se">\h</span>:<span class="se">\W</span> <span class="se">\t</span>.<span class="se">\d</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}${</span><span class="nv">GIT_BRANCH</span><span class="k">}</span><span class="nv">$NC</span> <span class="k">${</span><span class="nv">GVM</span><span class="k">}</span><span class="o">]</span> <span class="se">\n</span> &gt;&amp;rdquo;
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nv">RED</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;31m&amp;rsquo;
</span><span class='line'>  <span class="nv">GREEN</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0;32m&amp;rsquo;
</span><span class='line'>  <span class="nv">NC</span><span class="o">=</span>&amp;lsquo;<span class="se">\e</span><span class="o">[</span>0m&amp;rsquo;
</span><span class='line'>  <span class="nv">GIT_BRANCH</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>&lt;/strong&gt;git_ps1 &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">GVM</span><span class="o">=</span>&amp;lsquo;<span class="k">$(</span>gvm-prompt &amp;ldquo;<span class="o">(</span>%s<span class="k">)</span>&amp;rdquo;<span class="o">)</span>&amp;rsquo;
</span><span class='line'>  <span class="nv">PS1</span><span class="o">=</span>&amp;ldquo;<span class="o">[</span><span class="k">${</span><span class="nv">GREEN</span><span class="k">}</span><span class="se">\u</span>@<span class="se">\h</span>:<span class="se">\W</span> <span class="k">${</span><span class="nv">RED</span><span class="k">}${</span><span class="nv">GIT_BRANCH</span><span class="k">}</span><span class="nv">$NC</span> <span class="k">${</span><span class="nv">GVM</span><span class="k">}</span><span class="o">]</span> <span class="se">\n</span> &gt;&amp;rdquo;
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
</feed>
